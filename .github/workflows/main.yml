on:
  workflow_dispatch: # Trigger manually
  push:

env:
  DEPLOYMENT_NAME: bitdealer
  DEPLOYMENT_TOKEN: ${{ secrets.TOKEN }}
  NAMESPACE: ${{ vars.NAMESPACE }}
  DEALER_URL: ${{ vars.DEALER_URL }}
  REPOSITORY_OWNER: $(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Quarkus app
    steps:
      - name: Checkout the code
        uses: actions/checkout@master
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Cache maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DB_KIND: ${{ secrets.DB_KIND }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          mvn --batch-mode --update-snapshots clean package \
          -Dquarkus.container-image.build=true \
          -Dquarkus.container-image.registry="ghcr.io" \
          -Dquarkus.container-image.group=${{ env.REPOSITORY_OWNER }} \
          -Dquarkus.container-image.name=${{ env.DEPLOYMENT_NAME }} \
          -Dquarkus.container-image.tag=latest \
          -Dquarkus.kubernetes.env-vars.DB_KIND=${{ secrets.DB_KIND }} \
          -Dquarkus.kubernetes.env-vars.DB_URL=${{ secrets.DB_URL }} \
          -Dquarkus.kubernetes.env-vars.DB_USERNAME=${{ secrets.DB_USERNAME }} \
          -Dquarkus.kubernetes.env-vars.DB_PASSWORD=${{ secrets.DB_PASSWORD }}

      - name: Log in to registry
        if: github.ref == 'refs/heads/main'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push the Docker image to GHCR
        if: github.ref == 'refs/heads/main'
        run: |
          docker push ghcr.io/${{ env.REPOSITORY_OWNER }}/${{ env.DEPLOYMENT_NAME }}

      - name: Deploy
        if: env.DEPLOYMENT_TOKEN && github.ref == 'refs/heads/main' && false
        run: |-
          echo "${{ env.DEPLOYMENT_TOKEN }}" > kubeconfig.yaml
          kubectl --kubeconfig kubeconfig.yaml --namespace ${{ env.NAMESPACE }} delete secret api-user --ignore-not-found
          kubectl --kubeconfig kubeconfig.yaml --namespace ${{ env.NAMESPACE }} create secret generic api-user --from-literal=username=admin --from-literal=password=${{ secrets.ADMIN_PASSWORD }}
          kubectl --kubeconfig kubeconfig.yaml --namespace ${{ env.NAMESPACE }} apply -f target/kubernetes/kubernetes.yml
          kubectl --kubeconfig kubeconfig.yaml --namespace ${{ env.NAMESPACE }} set env deployment/${{ env.DEPLOYMENT_NAME }} \
            DB_KIND=${{ secrets.DB_KIND }} \
            DB_URL=${{ secrets.DB_URL }} \
            DB_USERNAME=${{ secrets.DB_USERNAME }} \
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          kubectl --kubeconfig kubeconfig.yaml --namespace ${{ env.NAMESPACE }} rollout status deployment/${{ env.DEPLOYMENT_NAME }}
          kubectl --kubeconfig kubeconfig.yaml --namespace ${{ env.NAMESPACE }} get services -o wide
          rm kubeconfig.yaml



